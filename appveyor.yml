environment:
  global:
    REPO_DIR: dlib
    PACKAGE_NAME: dlib-bin
    BUILD_COMMIT: v19.21
    BUILD_DEP: "cython cmake wheel"
    TWINE_USERNAME: __token__

  matrix:
    #- PYTHON: C:\Python36
    - PYTHON: C:\Python36-x64
    #- PYTHON: C:\Python37
    - PYTHON: C:\Python37-x64
    #- PYTHON: C:\Python38
    - PYTHON: C:\Python38-x64

matrix:
    fast_finish: true

install:
    # Fetch submodules
    - git submodule update --init --recursive

    # Install new Python if necessary
    - ps: .\multibuild\install_python.ps1

    # Prepend newly installed Python to the PATH of this build (this cannot be
    # done from inside the powershell script as it would require to restart
    # the parent CMD process).
    - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%
    - python -m pip install -U pip setuptools

    # Fix MSVC builds for 64-bit Python. See:
    # http://stackoverflow.com/questions/32091593/cannot-install-windows-sdk-7-1-on-windows-10
    - echo "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 > "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64/vcvars64.bat"

    # Check that we have the expected version and architecture for Python
    - python --version
    - python -c "import struct; print(struct.calcsize('P') * 8)"

build_script:
    # Install the dependencies of the project.
    - python -m pip install %BUILD_DEP%
    - cd %REPO_DIR%
    - git checkout %BUILD_COMMIT%
    - python setup.py bdist_wheel
    - cd ..

test_script:
    # create test env
    - virtualenv --python %PYTHON%\Python.exe test_env
    - test_env\Scripts\activate.bat
    - where python

    # install from wheel
    - python -m pip install --pre --no-index --find-links %REPO_DIR%\dist\ %PACKAGE_NAME%

    # Change into an innocuous directory and find tests from installation
    - mkdir for_testing
    - cd for_testing
    - python --version
    - python -c "import dlib"
    - cd ..

artifacts:
    - path: "%REPO_DIR%\\dist\\*"

on_success:
  - pip install twine
  - echo "Deploy"
